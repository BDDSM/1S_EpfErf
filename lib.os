Перем УровеньОтладки Экспорт;
Перем РежимЗапускаИБ Экспорт; // S|F

Процедура Инициализировать(СкриптОбъект, Отказ) Экспорт
	СкриптОбъект.Настройки = Новый Структура("
	|	 ibAddress	
	|	,ibUserNm
	|	,ibPasswd
	|	,comModel
	|	,unpakDir
	|",  "A:/localBasesPath/1CDpath", NULL, NULL, NULL, "out");

	jsn = Новый ПарсерJSON;
	
	Если Не СкриптОбъект.Конфиг.Существует() Тогда
		Попытка
			СтрокаДж = jsn.ЗаписатьJSON(СкриптОбъект.Настройки);
			джонсон = Новый ЗаписьТекста(СкриптОбъект.Конфиг.ПолноеИмя);
			джонсон.Записать(СтрокаДж);
			джонсон.Закрыть();
			ВывестиЛог("Не найден конфигурационный файл. Создан пустой новый "+СкриптОбъект.Конфиг.ПолноеИмя);
		Исключение
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			ВывестиЛог(ТекстОшибки);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	Иначе
		Попытка
			ОбъектДж = jsn.ПрочитатьJSON(Новый ЧтениеТекста(СкриптОбъект.Конфиг.ПолноеИмя).Прочитать());
			Если Не ТипЗнч(ОбъектДж) = Тип("Соответствие") Тогда
				ВывестиЛог("Неправильная структура файла конфигурации "+СкриптОбъект.Конфиг.ПолноеИмя+" (Тип: "+ ТипЗнч(ОбъектДж)+")");
			КонецЕсли;
			Для Каждого нн Из СкриптОбъект.Настройки Цикл
				СкриптОбъект.Настройки[нн.Ключ] = ОбъектДж[нн.Ключ];
			КонецЦикла;
		Исключение
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			ВывестиЛог(ТекстОшибки);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	// Парсер = Новый ПарсерАргументовКоманднойСтроки();
	// Парсер.ДобавитьПараметр("Действия");
	// Для Каждого прм Из СкриптОбъект.Настройки Цикл
		// Парсер.ДобавитьИменованныйПараметр("-"+прм.Ключ);
	// КонецЦикла;
	// Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	// Для Каждого прм Из Параметры Цикл
		// Сообщить(""+ТипЗнч(Параметры)+"  "+прм);
	// КонецЦикла;
	//*****************************QH*************************
	Если АргументыКоманднойСтроки.Количество()<2 Тогда
		СкриптОбъект.help(4);
	КонецЕсли;
	КомСтрока = "";
	Для Каждого Аргумент Из АргументыКоманднойСтроки Цикл
		 Комстрока = Комстрока + " "+Аргумент;
	КонецЦикла;
	мсКомстрока = СтрокуВМассив(КомСтрока, "-");

	Для Каждого гг Из мсКомстрока Цикл
		Если ПустаяСтрока(гг) Тогда
			Продолжить;
		КонецЕсли;
		КлючЗнач = СтрокуВМассив(гг, " ");
		ИмяПараметра = КлючЗнач[0];
		ЗначениеПараметра = КлючЗнач[1];
		Если НРег(ИмяПараметра)="do" Тогда
			СкриптОбъект.Настройки.Вставить("массивДействий", СтрокуВМассив(ЗначениеПараметра, ","));
		Иначе
			СкриптОбъект.Настройки[ИмяПараметра] = ЗначениеПараметра;
		КонецЕсли;
	КонецЦикла;
	//********************************************************
	Если Не СкриптОбъект.Настройки.Свойство("массивДействий") Тогда
		ВывестиЛог("Не указаны действия ключом -do ");
		СкриптОбъект.help(5);
	КонецЕсли;
	ПроверитьПараметры(СкриптОбъект.Настройки, Отказ);
	Если Отказ Тогда СкриптОбъект.help(3); КонецЕсли;
	ОбеспечитьКаталог("reps");
	ОбеспечитьКаталог("in");
	ОбеспечитьКаталог("out");
	
КонецПроцедуры

Процедура ПроверитьПараметры(СтрктНастр, Отказ)

	Для Каждого прм Из СтрктНастр Цикл
		ВывестиЛог("Проверяется параметр "+прм.Ключ+" со значением """+прм.Значение+"""", 3);
		Если ПустаяСтрока(прм.Значение) Тогда
			Если НРег(прм.Ключ) = "ibaddress" ИЛИ НРег(прм.Ключ) = "commodel" Тогда
				ВывестиЛог("Не заполнен параметр "+прм.Ключ+" !", 0);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура Шаг_export(Скрипт, Отказ) Экспорт
	ВывестиЛог("1. [Шаг_export] Выполняется выгрузка объектов в каталог reps\ИБ", 1);
	ИмяКаталогаИБ = ИмяИнформационнойБазы(Скрипт.Настройки.ibAddress);
	РабочийКаталог = "reps\"+ИмяКаталогаИБ;
	ОбеспечитьКаталог(РабочийКаталог, Истина);
	ком = ПолучитьСоединениеСИБ(Скрипт.Настройки);
	Если ком = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	запрос = ком.NewObject("Запрос");
	запрос.Текст = "
	| ВЫБРАТЬ
	|	о.Код + ""#"" + о.Наименование + ВЫБОР
	|		КОГДА о.ВидОбработки = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхВнешнихОбработок.Отчет)
	|			ТОГДА "".erf""
	|		ИНАЧЕ "".epf""
	|	КОНЕЦ КАК Имя,
	|	о.ХранилищеВнешнейОбработки Как Хранилище
	| ИЗ
	|	Справочник.ВнешниеОбработки КАК о
	| ГДЕ
	|	НЕ о.ЭтоГруппа
	|	И НЕ о.ПометкаУдаления";
	результат = запрос.Выполнить().Выгрузить();
	Для Каждого рез Из результат Цикл
		Имя = СтрЗаменить(рез.Имя, "*", "_");
		Имя = СтрЗаменить(Имя, "/", "_");			Имя = СтрЗаменить(Имя, "\", "_");
		Имя = СтрЗаменить(Имя, ">", "_");			Имя = СтрЗаменить(Имя, "<", "_");
		Имя = СтрЗаменить(Имя, "?", "_");
		ВывестиЛог(Имя, 3);
		Хр = рез.Хранилище.Получить();
		Хр.Записать(РабочийКаталог+"\"+Имя);
	КонецЦикла;
	ОсвободитьОбъект(ком);
КонецПроцедуры

Процедура Шаг_unpack(Скрипт, Отказ) Экспорт
	ВывестиЛог("2. [Шаг_unpack] Выполняется распаковка файлов reps\ИБ -> in", 1);
	ИмяКаталогаИБ = ИмяИнформационнойБазы(Скрипт.Настройки.ibAddress);
	РабочийКаталог = "in\"+ИмяКаталогаИБ;
	ОбеспечитьКаталог(РабочийКаталог, Истина);
	мсФайлы = НайтиФайлы("reps\"+ИмяКаталогаИБ);
	КодВозврата = 0;
	Для Каждого фл Из мсФайлы Цикл
		
		СтрокаКоманды = СтрШаблон("v8\v8unpack.exe -p %1 %2",
			ОбернутьВКавычки(фл.ПолноеИмя),
			ОбернутьВКавычки(РабочийКаталог+"\"+фл.Имя));
		
		ЗапуститьПриложение(СтрокаКоманды, , Истина, КодВозврата);
		ВывестиЛог("Распаковка файла "+фл.Имя+" rc: "+КодВозврата, 2)
	КонецЦикла;
КонецПроцедуры

Процедура Шаг_change(Скрипт, Отказ) Экспорт
	ВывестиЛог("3. [Шаг_change] Изменение файлов ", 1);
КонецПроцедуры

Процедура Шаг_pack(Скрипт, Отказ) Экспорт
	ВывестиЛог("4. [Шаг_pack] Упаковка файлов в каталог out\ИБ ", 1);
	ИмяКаталогаИБ = ИмяИнформационнойБазы(Скрипт.Настройки.ibAddress);
	ИсхКаталог = "in\"+ИмяКаталогаИБ;
	ВыхКаталог = "out\"+ИмяКаталогаИБ;
	ОбеспечитьКаталог(ВыхКаталог, Истина);
	мсФайлы = НайтиФайлы(ИсхКаталог);

	КодВозврата = 0;
	Для Каждого фл Из мсФайлы Цикл
		СтрокаКоманды = СтрШаблон("v8\v8unpack.exe -b %1 %2",
			ОбернутьВКавычки(фл.ПолноеИмя),
			ОбернутьВКавычки(ВыхКаталог+"\"+фл.Имя));

		ЗапуститьПриложение(СтрокаКоманды, , Истина, КодВозврата);
		ВывестиЛог("Упаковка каталога "+фл.Имя+" rc: "+КодВозврата, 2)
	КонецЦикла;
КонецПроцедуры

Процедура Шаг_import(Скрипт, Отказ) Экспорт
	ВывестиЛог("5. [Шаг_import] Загрузка объектов в ИБ из каталога out\ИБ", 1);
	ИмяКаталогаИБ = ИмяИнформационнойБазы(Скрипт.Настройки.ibAddress);
	РабочийКаталог = "out\"+ИмяКаталогаИБ;
	мсФайлы = НайтиФайлы(РабочийКаталог);
	ком = ПолучитьСоединениеСИБ(Скрипт.Настройки);
	Если ком = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	запрос = ком.NewObject("Запрос");
	Для Каждого фл Из мсФайлы Цикл
		стрОбработка = СтрокуВМассив(фл.ИмяБезРасширения, "#");
		Код = стрОбработка[0];
		Наименование = стрОбработка[1];
		Сообщить("код: "+Код+" нам: "+Наименование);
		эле = ком.Справочники.ВнешниеОбработки.НайтиПоКоду(Код);
		Если эле.Пустая() Тогда
			ВывестиЛог("Не найдено в справочнике по коду: "+Код);
			Продолжить;
		КонецЕсли;
		ВО = эле.ПолучитьОбъект();
		дд = Ком.NewObject("ДвоичныеДанные", фл.ПолноеИмя);
		хз = Ком.NewObject("ХранилищеЗначения", дд);
		ВО.ХранилищеВнешнейОбработки = хз;	
		ВО.КомментарийКФайлуИсточнику = "Исходный файл: "+ Наименование + фл.Расширение + Символы.ПС + "размер:" + фл.Размер()+" байт; изменен:" + фл.ПолучитьВремяИзменения() + "; сохранен в ИБ:" + ТекущаяДата()+ "  (массовая загрузка)";
		Попытка
			ВО.Записать();	
		Исключение
			ВывестиЛог(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	ОсвободитьОбъект(ком);
КонецПроцедуры

Функция   ПолучитьСоединениеСИБ(Настройки)
	РежимЗапуска = РежимЗапускаПоАдресуИБ(Настройки.ibAddress);
	AuthStr = "";
	Если Не ПустаяСтрока(Настройки.ibUserNm) Тогда
		AuthStr = AuthStr + "Usr="""+Настройки.ibUserNm+""";";
		Если Не ПустаяСтрока(Настройки.ibUserNm) Тогда
			AuthStr = AuthStr + "Pwd="""+Настройки.ibPasswd+""";";
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗапуска = Неопределено Тогда
		ВывестиЛог("Не удалось определить режим работы информационной базы "+Настройки.ibAddress);
		Возврат Неопределено;
	ИначеЕсли РежимЗапуска = "S" Тогда // серверный
		мИБ = СтрокуВМассив(Настройки.ibAddress,"\");
		Попытка
		СтрокаСоединения = "Srvr="""+мИБ[0]+""";Ref="""+мИБ[1]+""";"+AuthStr;
		Исключение
			Сообщить(СтрокаСоединения);
		КонецПопытки;
	ИначеЕсли РежимЗапуска = "F" Тогда // Файловый
		СтрокаСоединения = "File="""+СтрЗаменить(Настройки.ibAddress, "\", "/")+""";"+AuthStr;
	КонецЕсли;

	ВывестиЛог("Создание COM-коннектора <"+ Настройки.comModel + "> "+СтрокаСоединения, 2);
	ком =  Новый COMОбъект(Настройки.comModel);
	Попытка
		Соединение = ком.Connect(СтрокаСоединения);
	Исключение
		ТекстОшибки = ИнформацияОбОшибке().Описание;
		ВывестиЛог("Ошибка соединения с ИБ:"+ТекстОшибки+". Строка соединения: ["+СтрокаСоединения+"]");
		Возврат Неопределено;
	КонецПопытки;

	Возврат Соединение;
	
КонецФункции

///////////////////////// вспомогательные процедуры ///////////////////////
Процедура ОбеспечитьКаталог(Знач Каталог, Очистить = Ложь)
	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Каталог " + Каталог + " не является каталогом";
	КонецЕсли;
	Если Очистить Тогда
		УдалитьФайлы(Каталог, "*.*");
	КонецЕсли;
КонецПроцедуры

Функция ОбернутьВКавычки(Знач Путь)
	Возврат """" + Путь + """";
КонецФункции

Функция ПоследнийЭлементПути(Путь)
	фПуть = Новый Файл(Путь);
	Возврат фПуть.Имя;
КонецФункции

Функция ИмяИнформационнойБазы(Адрес)
	Если РежимЗапускаПоАдресуИБ(Адрес) = "F" Тогда
		Возврат ПоследнийЭлементПути(Адрес);
	Иначе
		Возврат Адрес;
	КонецЕсли;
КонецФункции

Функция РежимЗапускаПоАдресуИБ(АдресИБ) Экспорт
	Если Не ПустаяСтрока(АдресИБ) Тогда
		ИБкаталогПроверка = Новый Файл(АдресИБ);
		Режим = ?(ИБкаталогПроверка.Существует(), "F", "S");
		Возврат Режим;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СтрокуВМассив(ИсхСтрока, Разделитель = ",") Экспорт
	Результат = Новый Массив;
	Если Не ПустаяСтрока(ИсхСтрока) Тогда 
		мсСтрока = СтрЗаменить(ИсхСтрока, Разделитель, Символы.ПС);
			
		Для нс = 1 По СтрЧислоСтрок(мсСтрока) Цикл
			стр = СтрПолучитьСтроку(мсСтрока, нс);
			Если Не ПустаяСтрока(стр) Тогда
				Результат.Добавить(стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция МассивВСтроку(Знач МассивСтрок, Разделитель = " ") Экспорт
	Результат = "";
	Для Каждого нн Из МассивСтрок Цикл
		Результат = Результат + СокрЛП(нн) + Разделитель;
	КонецЦикла;
	Результат = Лев(Результат, СтрДлина(Результат) - СтрДлина(Разделитель));
	Возврат Результат;
КонецФункции

Процедура ВывестиЛог(Стр, Уровень = 0) Экспорт
	Отступ = Лев("          ", Уровень*2+2);
	Если Уровень<=УровеньОтладки Тогда
		Сообщить("("+Уровень+") "+ТекущаяДата()+Отступ+Стр);
	КонецЕсли;
КонецПроцедуры

