Перем УровеньОтладки Экспорт;
Перем РежимЗапускаИБ Экспорт; // S|F

Процедура Инициализировать(СкриптОбъект, Отказ) Экспорт
	СкриптОбъект.Настройки = Новый Структура("
	|	 ibAddress	
	|	,clUserNm
	|	,clPasswd
	|	,comModel
	|",  NULL, NULL, NULL, NULL);

	jsn = Новый ПарсерJSON;
	
	Если Не СкриптОбъект.Конфиг.Существует() Тогда
		Попытка
			СтрокаДж = jsn.ЗаписатьJSON(СкриптОбъект.Настройки);
			джонсон = Новый ЗаписьТекста(СкриптОбъект.Конфиг.ПолноеИмя);
			джонсон.Записать(СтрокаДж);
			джонсон.Закрыть();
			ВывестиЛог("Не найден конфигурационный файл. Создан пустой новый "+СкриптОбъект.Конфиг.ПолноеИмя);
		Исключение
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			ВывестиЛог(ТекстОшибки);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	Иначе
		Попытка
			ОбъектДж = jsn.ПрочитатьJSON(Новый ЧтениеТекста(СкриптОбъект.Конфиг.ПолноеИмя).Прочитать());
			Если Не ТипЗнч(ОбъектДж) = Тип("Соответствие") Тогда
				ВывестиЛог("Неправильная структура файла конфигурации "+СкриптОбъект.Конфиг.ПолноеИмя+" (Тип: "+ ТипЗнч(ОбъектДж)+")");
			КонецЕсли;
			Для Каждого нн Из СкриптОбъект.Настройки Цикл
				СкриптОбъект.Настройки[нн.Ключ] = ОбъектДж[нн.Ключ];
			КонецЦикла;
		Исключение
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			ВывестиЛог(ТекстОшибки);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	// Парсер = Новый ПарсерАргументовКоманднойСтроки();
	// Парсер.ДобавитьПараметр("Действия");
	// Для Каждого прм Из СкриптОбъект.Настройки Цикл
		// Парсер.ДобавитьИменованныйПараметр("-"+прм.Ключ);
	// КонецЦикла;
	// Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	// Для Каждого прм Из Параметры Цикл
		// Сообщить(""+ТипЗнч(Параметры)+"  "+прм);
	// КонецЦикла;
	//*****************************QH*************************
	КомСтрока = "";
	Для Каждого Аргумент Из АргументыКоманднойСтроки Цикл
		 Комстрока = Комстрока + " "+Аргумент;
	КонецЦикла;
	мсКомстрока = РазложитьСтрокуВМассивПодстрок(КомСтрока, "-");
	Для Каждого гг Из мсКомстрока Цикл
		Если ПустаяСтрока(гг) Тогда
			Продолжить;
		КонецЕсли;
		КлючЗнач = РазложитьСтрокуВМассивПодстрок(гг, " ");
		ИмяПараметра = КлючЗнач[0];
		ЗначениеПараметра = КлючЗнач[1];
		Если НРег(ИмяПараметра)="do" Тогда
			СкриптОбъект.массивДействий = РазложитьСтрокуВМассивПодстрок(ЗначениеПараметра, ",");
		Иначе
			СкриптОбъект.Настройки[ИмяПараметра] = ЗначениеПараметра;
		КонецЕсли;
	КонецЦикла;
	//********************************************************
КонецПроцедуры

Procedure ПроверитьПараметры(СкриптОбъект, Отказ) Экспорт
	Перем СтрктНастр;
	СтрктНастр = СкриптОбъект.Настройки;
	Для Каждого прм Из СтрктНастр Цикл
		ВывестиЛог("Проверяется параметр "+прм.Ключ+" со значением """+прм.Значение+"""", 2);
		Если ПустаяСтрока(прм.Значение) Тогда
			Если НРег(прм.Ключ) = "ibaddress" ИЛИ НРег(прм.Ключ) = "commodel" Тогда
				ВывестиЛог("Не заполнен параметр "+прм.Ключ+" !", 0);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НРег(прм.Ключ) = "ibaddress" И Не ПустаяСтрока(прм.Значение) Тогда
			ИБкаталог = Новый Файл(прм.Значение);
			РежимЗапускаИБ = ?(ИБкаталог.Существует(), "F", "S");
		КонецЕсли;
	КонецЦикла;
EndProcedure


Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Процедура ВывестиЛог(Стр, Уровень = 0) Экспорт
	Отступ = Лев("          ", Уровень*2+2);
	Если Уровень<=УровеньОтладки Тогда
		Сообщить("("+Уровень+") "+ТекущаяДата()+Отступ+Стр);
	КонецЕсли;
КонецПроцедуры
